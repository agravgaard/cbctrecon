#------------------------------------------------------------------------------
#  AppVeyor Continous Integration (CI) configuration file
#
# Configures a Windows-like environment for building RTK on AppVeyor.
#
# Only ITK is being built the first time to ensure the build time is less
# than appveyor's 1 hour limit. ITK is then cached and retrieved at the
# beginning of every RTK build.
# To reduce build time, ITK is built with the option BUILD_TESTING set to OFF.
# We then rebuild the itkTestDriver target on its own as it is required by RTK.
#
# The ITKData target is also built appart from RTK as many network errors could
# occur on appveyor. If a network error occurs, preventing RTK to fetch its
# test data, then the appveyor-retry command will re-build this target up to
# three times.

# Target platform
platform:
  - x64

environment:
  # Environment variables
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  BUILD_TYPE: Release
  CTEST_SOURCE_DIRECTORY: "%APPVEYOR_BUILD_FOLDER%"
  CTEST_BINARY_DIRECTORY: "%APPVEYOR_BUILD_FOLDER%/build"
  CTEST_CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
  CTEST_TEST_TIMEOUT: "300"
  CTEST_BUILD_CONFIGURATION: Release
  CTEST_CONFIGURATION_TYPE: Release

  # Build matrix. (defines different configuration for multiple jobs)
  matrix:
    - GENERATOR: "%CTEST_CMAKE_GENERATOR%"


# We need to create an opencl import library that clfft can link against
# Vendor based OpenCL packages are hard to use because of download size, registration requirements
# and unattended installs not well supported
install:
  - echo Installing OpenCL
  - ps: mkdir $env:OPENCL_ROOT
  - ps: pushd $env:OPENCL_ROOT
  - ps: $opencl_registry = $env:OPENCL_REGISTRY
  # This downloads the source to the Khronos ICD library
  - git clone --depth 1 https://github.com/KhronosGroup/OpenCL-ICD-Loader.git
  - ps: mv ./OpenCL-ICD-Loader/* .
  # This downloads all the opencl header files
  # The cmake build files expect a directory called inc
  - ps: mkdir inc/CL_headers_repo
  - git clone --depth 1 https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL_headers_repo
  - ps: pushd inc
  - ps: mkdir CL
  - ps: cp CL_headers_repo/opencl22/CL/* CL/
  - ps: popd
  # - ps: wget $opencl_registry/api/2.1/cl.hpp -OutFile inc/CL/cl.hpp
  # - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }
  # Create the static import lib in a directory called lib, so findopencl() will find it
  - ps: mkdir lib
  - ps: pushd lib
  - cmake -G "NMake Makefiles" ..
  - nmake
  - ps: mkdir x64; cp OpenCL.lib x64\
  - ps: popd
  # Switch to OpenCL 1.2 headers
  - ps: pushd inc/CL
  - ps: del *
  - ps: cp -r ../CL_headers_repo/opencl12/CL/* .
  # - git fetch origin opencl12:opencl12
  # - git checkout opencl12
  - ps: popd
  # Rename the inc directory to include, so FindOpencl() will find it
  - ps: ren inc include
  - ps: popd

  - echo Installing FFTW
  - ps: mkdir $env:FFTW_ROOT
  - ps: pushd $env:FFTW_ROOT
  # This downloads the windows 64-bit pre-compiled dlls
  - ps: wget ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4-dll64.zip -OutFile fftw-3.3.4-dll64.zip
  - ps: 7z x fftw-3.3.4-dll64.zip
  #  - ps: pushd fftw-3.3.4-dll64
  - ps: lib /machine:x64 /def:libfftw3-3.def
  - ps: lib /machine:x64 /def:libfftw3f-3.def
  - ps: lib /machine:x64 /def:libfftw3l-3.def

build:
  parallel: true
  verbosity: minimal


build_script:
  - cd "%APPVEYOR_BUILD_FOLDER%" & mkdir build & cd build
  - cmake -G"%CTEST_CMAKE_GENERATOR%" "%APPVEYOR_BUILD_FOLDER%" -DBUILD_TESTING=OFF -DUSE_CUDA=OFF -DCBCTRECON_BUILD_TESTS=ON -DUSE_TINYREFL=OFF -DCMAKE_INSTALL_PREFIX="%APPVEYOR_BUILD_FOLDER%/build/"
  # Configure twice to make sure RTK is downloaded by ITK
  - cmake "%APPVEYOR_BUILD_FOLDER%"
  # Fetch ExternalData. (Retried up to 3 times if network errors occured) <- TODO:this step must be added!!
  - appveyor-retry cmake --build . --config %BUILD_TYPE%
  # Build CbctRecon
  - ctest -V -C %CTEST_CONFIGURATION_TYPE%
  - cpack

test: off

deploy: off
