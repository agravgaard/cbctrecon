#------------------------------------------------------------------------------
#  AppVeyor Continous Integration (CI) configuration file
#
# Configures a Windows-like environment for building CbctRecon on AppVeyor.
#


# Windows Server 2012 R2 (x64) <== Appveyor default image
# Visual Studio 2015

# os: expands the build matrix to include multiple os's
os:
  - Windows Server 2012

# Target platform
platform:
  - x64

# Only clone the top level commit; don't bother with history
shallow_clone: true

environment:
  # Environment variables
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  DCMTK_VERSION: DCMTK-3.6.3
  DCMTK_SOURCE_DIR: "C:/projects/DCMTK"
  DCMTK_BINARY_DIR: "C:/projects/DCMTK-build"
  ITK_VERSION: v4.13.1
  ITK_SOURCE_DIR: "C:/projects/ITK"
  ITK_BINARY_DIR: "C:/projects/ITK-build"
  FFTW_DIR: "C:/projects/cbctrecon/bin/fftw"
  BUILD_TYPE: Release
  CTEST_CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
  CTEST_TEST_TIMEOUT: "300"

  # Build matrix. (defines different configuration for multiple jobs)
  matrix:
    - GENERATOR: "%CTEST_CMAKE_GENERATOR%"

  global:
    FFTW_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\fftw"


init:
  - echo init step
  - cmake --version
  - C:\"Program Files (x86)"\"Microsoft Visual Studio 14.0"\VC\vcvarsall.bat %PLATFORM%

# We need to create an opencl import library that cbctrecon can link against
# Vendor based OpenCL packages are hard to use because of download size, registration requirements
# and unattended installs not well supported
install:
  # Install OpenCL headers and libraries
  - set NUGETDIR=C:\NUGET
  - nuget install opencl-nug -Version 0.777.77 -OutputDirectory %NUGETDIR%
  - dir %NUGETDIR%\opencl-nug.0.777.77\build\native\
  - set OCL_ROOT=%NUGETDIR%\opencl-nug.0.777.77\build\native
  # Install OpenCL Runtime
  - choco install opencl-intel-cpu-runtime
  # Check if it's working
  - ps: appveyor DownloadFile "https://ci.appveyor.com/api/projects/oblomov/clinfo/artifacts/clinfo.exe?job=platform:+x64" -FileName clinfo.exe
  - .\clinfo.exe

  - echo Installing FFTW
  - ps: mkdir $env:FFTW_ROOT
  - ps: pushd $env:FFTW_ROOT
  # This downloads the windows 64-bit pre-compiled dlls
  - ps: wget ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4-dll64.zip -OutFile fftw-3.3.4-dll64.zip
  - ps: 7z x fftw-3.3.4-dll64.zip
  #  - ps: pushd fftw-3.3.4-dll64
  - ps: lib /machine:x64 /def:libfftw3-3.def
  - ps: lib /machine:x64 /def:libfftw3f-3.def
  - ps: lib /machine:x64 /def:libfftw3l-3.def
  - ps: ls
  - ps: cd C:/Qt/5.12.1/
  - ps: ls

  - choco install dcmtk

cache:
  # Caching ITK source and build tree
  - '%ITK_SOURCE_DIR% -> .appveyor_clear_cache'
  - '%ITK_BINARY_DIR% -> .appveyor_clear_cache'
  - '%ITK_BINARY_DIR%/lib/%BUILD_TYPE% -> .appveyor_clear_cache'
  - 'C:\ProgramData\chocolatey\bin -> .appveyor_clear_cache'
  - 'C:\ProgramData\chocolatey\lib -> .appveyor_clear_cache'

build:
  parallel: true
  verbosity: minimal

before_build:
  ######## ITK ########
  # Checkout ITK source tree
  - if not exist "%ITK_SOURCE_DIR%" (
      cd C:/projects/ &
      git clone --depth 1 --branch %ITK_VERSION% https://github.com/InsightSoftwareConsortium/ITK.git ITK
    )

  # Config ITK and exit to cache the configuration
  - set rebuild_itk=false
  - if not exist "%ITK_BINARY_DIR%" set rebuild_itk=true
  - if not exist "%ITK_BINARY_DIR%/lib/%BUILD_TYPE%/itkRTK-4.13.lib" set rebuild_itk=true
  - if "%rebuild_itk%" == "true" (
      cd C:/projects/ &
      mkdir "%ITK_BINARY_DIR%" &
      cd "%ITK_BINARY_DIR%" &
      cp "%APPVEYOR_BUILD_FOLDER%/External/patches/ExternalRTK.remote.cmake" "%ITK_SOURCE_DIR%/Modules/Remote/" &
      cmake -G "%GENERATOR%" -DBUILD_TESTING:BOOL=OFF ../ITK -DBUILD_EXAMPLES=OFF -DModule_ITKReview=ON -DModule_RTK=ON -DITK_USE_SYSTEM_FFTW=ON -DITK_USE_FFTWF=ON -DFFTWF_LIB="%FFTW_DIR%/libfftw3f-3.lib" -DITK_USE_FFTWD=ON -DFFTWD_LIB="%FFTW_DIR%/libfftw3-3.lib" -DFFTW_INCLUDE_PATH="%FFTW_DIR%" -DFFTW_INCLUDE_DIR="%FFTW_DIR%" -DITK_USE_GPU=ON -DITK_BUILD_DEFAULT_MODULES=OFF -DOPENCL_INCLUDE_DIRS="%OPENCL_DIR%/include" -DOPENCL_LIBRARIES="%OPENCL_DIR%/lib/x64/OpenCL.lib"  -DOPENCL_ROOT_DIR="%OPENCL_DIR%" -DITK_USE_SYSTEM_DCMTK=ON -DModule_ITKMathematicalMorphology=ON -DRTK_BUILD_APPLICATIONS=OFF -DRTK_TIME_EACH_FILTER=ON -DRTK_USE_CUDA=OFF
    )
  - if not exists "%ITK_BINARY_DIR%/configured.txt" (
      echo 0 > "%ITK_BINARY_DIR%/configured.txt" &
      exit 1
    )
  - if "%rebuild_itk%" == "true" (
      cmake ../ITK -DModule_RTK=ON &
      cmake --build . --config %BUILD_TYPE% &
      exit 1
    )


build_script:
  - cd "%APPVEYOR_BUILD_FOLDER%" & mkdir build & cd build
  - git config --global user.email "andreasga22@gmail.com"
  - git config --global user.name "Andreas Gravgaard Andersen"
  # Configure CbctRecon and dependencies
  - cmake -G"%CTEST_CMAKE_GENERATOR%" "%APPVEYOR_BUILD_FOLDER%" -DBUILD_TESTING=OFF -DUSE_CUDA=OFF -DCBCTRECON_BUILD_TESTS=ON -DUSE_TINYREFL=OFF -DCMAKE_INSTALL_PREFIX="%APPVEYOR_BUILD_FOLDER%/build/" -DQt5_DIR="C:/Qt/5.12.1/msvc2015_64/lib/cmake/Qt5" -DITK_DIR="%ITK_BINARY_DIR%" -DDCMTK_DIR="%DCMTK_BINARY_DIR%" -DUSE_SYSTEM_ITK=ON -DUSE_SYSTEM_DCMTK=ON -DUSE_ITK_GDCM=ON
  # Fetch ExternalData. (Retried up to 3 times if network errors occured)
  - echo Downloading data
  - appveyor-retry cmake --build . --config %BUILD_TYPE% --target CbctData
  # Install executables and libraries to bin before running test:
  - echo Building ALL
  - cmake --build . --config %BUILD_TYPE% --target ALL_BUILD
  - echo Installing
  - cmake --build . --config %BUILD_TYPE% --target INSTALL
  - echo Running CbctRecon_test
  - ctest -VV -C %BUILD_TYPE%
  - echo Creating .msi
  - cpack -C %BUILD_TYPE%
  - move CbctRecon-*.msi %APPVEYOR_BUILD_FOLDER%

test: off

artifacts:
  - path: 'CbctRecon-*.msi'
    name: binary_msi

# Appveyor will push the artifacts it has saved to GitHub 'releases' tab
deploy:
  - provider: GitHub
    repository: agravgaard/CbctRecon
    description: "Windows installer from AppVeyor CI"
    auth_token:
      secure: Wcahfcb8RTeiEypo/pM0fLnLU+Pd7Hd2UV1tQbJfihQEayaz/Ucb0am78msCC0yy
    artifact: /.*\.msi/
    draft: true
    prerelease: true
    on:
      branch: master
    # appveyor_repo_tag: true
