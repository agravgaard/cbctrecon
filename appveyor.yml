#------------------------------------------------------------------------------
#  AppVeyor Continous Integration (CI) configuration file
#
# Configures a Windows-like environment for building CbctRecon on AppVeyor.
#


# Windows Server 2012 R2 (x64) <== Appveyor default image
# Visual Studio 2015

# os: expands the build matrix to include multiple os's
os:
  - Windows Server 2012

# Target platform
platform:
  - x64

# Only clone the top level commit; don't bother with history
shallow_clone: true

environment:
  # Environment variables
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  BUILD_TYPE: Release
  CTEST_SOURCE_DIRECTORY: "%APPVEYOR_BUILD_FOLDER%"
  CTEST_BINARY_DIRECTORY: "%APPVEYOR_BUILD_FOLDER%/build"
  CTEST_CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
  CTEST_TEST_TIMEOUT: "300"
  CTEST_BUILD_CONFIGURATION: Release
  CTEST_CONFIGURATION_TYPE: Release

  # Build matrix. (defines different configuration for multiple jobs)
  matrix:
    - GENERATOR: "%CTEST_CMAKE_GENERATOR%"

  global:
    OPENCL_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\opencl"
    FFTW_ROOT: "%APPVEYOR_BUILD_FOLDER%\\bin\\fftw"
    OPENCL_REGISTRY: "https://www.khronos.org/registry/cl"


init:
  - echo init step
  - cmake --version
  - C:\"Program Files (x86)"\"Microsoft Visual Studio 14.0"\VC\vcvarsall.bat %PLATFORM%

# We need to create an opencl import library that cbctrecon can link against
# Vendor based OpenCL packages are hard to use because of download size, registration requirements
# and unattended installs not well supported
install:
  - echo Installing OpenCL
  - ps: mkdir $env:OPENCL_ROOT
  - ps: pushd $env:OPENCL_ROOT
  # { #1: $env:OPENCL_ROOT
  - ps: $opencl_registry = $env:OPENCL_REGISTRY
  # This downloads the source to the Khronos ICD library
  - git clone --depth 1 https://github.com/KhronosGroup/OpenCL-ICD-Loader.git
  - ps: mv ./OpenCL-ICD-Loader/* .
  # This downloads all the opencl header files
  # The cmake build files expect a directory called inc
  - git clone --depth 1 https://github.com/KhronosGroup/OpenCL-Headers.git include
  - ps: cp -r ./include/* ./inc/
  # Create the static import lib in a directory called lib, so findopencl() will find it
  - ps: mkdir lib
  - ps: pushd lib
  #   { #2: $env:OPENCL_ROOT/lib
  - cmake -G "NMake Makefiles" ..
  - nmake
  - ps: mkdir x64; cp OpenCL.lib x64\
  - ps: popd
  #   } #2 back to $env:OPENCL_ROOT
  - ps: popd
  # } #1 back to %APPVEYOR_BUILD_FOLDER%

  - echo Installing FFTW
  - ps: mkdir $env:FFTW_ROOT
  - ps: pushd $env:FFTW_ROOT
  # This downloads the windows 64-bit pre-compiled dlls
  - ps: wget ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4-dll64.zip -OutFile fftw-3.3.4-dll64.zip
  - ps: 7z x fftw-3.3.4-dll64.zip
  #  - ps: pushd fftw-3.3.4-dll64
  - ps: lib /machine:x64 /def:libfftw3-3.def
  - ps: lib /machine:x64 /def:libfftw3f-3.def
  - ps: lib /machine:x64 /def:libfftw3l-3.def

build:
  parallel: true
  verbosity: minimal


build_script:
  # For CMake to find OpenCL:
  - ps: $env:AMDAPPSDKROOT = "$env:OPENCL_ROOT"
  - ps: dir $env:AMDAPPSDKROOT; dir $env:AMDAPPSDKROOT/lib; dir $env:AMDAPPSDKROOT/include;
  - cd "%APPVEYOR_BUILD_FOLDER%" & mkdir build & cd build
  # Configure CbctRecon and dependencies
  - cmake -G"%CTEST_CMAKE_GENERATOR%" "%APPVEYOR_BUILD_FOLDER%" -DBUILD_TESTING=OFF -DUSE_CUDA=OFF -DCBCTRECON_BUILD_TESTS=ON -DUSE_TINYREFL=OFF -DCMAKE_INSTALL_PREFIX="%APPVEYOR_BUILD_FOLDER%/build/"
  # Configure twice to make sure RTK is downloaded by ITK
  - cmake "%APPVEYOR_BUILD_FOLDER%"
  # Fetch ExternalData. (Retried up to 3 times if network errors occured) <- TODO:this step must be added!!
  - appveyor-retry cmake --build . --config %BUILD_TYPE%
  # Build CbctRecon
  - ctest -V -C %CTEST_CONFIGURATION_TYPE%
  - cpack

test: off

# Appveyor will push the artifacts it has saved to GitLab 'releases' tab
deploy:
  provider: GitHub
  repository: agravgaard/CbctRecon
  description: "Windows installer from AppVeyor CI"
  auth_token:
    secure: Wcahfcb8RTeiEypo/pM0fLnLU+Pd7Hd2UV1tQbJfihQEayaz/Ucb0am78msCC0yy
  artifact: /.*\.msi/
  draft: true
  prerelease: true
  on:
    appveyor_repo_tag: true
