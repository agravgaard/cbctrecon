diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7910cc6a..98626ecb 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -247,8 +247,8 @@ plm_set_pic_flags ()
 ##-----------------------------------------------------------------------------
 ##  Extra paths
 ##-----------------------------------------------------------------------------
-set (PLM_TESTING_SOURCE_DIR "${CMAKE_SOURCE_DIR}/Testing")
-set (PLM_TESTING_DATA_DIR "${CMAKE_SOURCE_DIR}/Testing/Data")
+set (PLM_TESTING_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Testing")
+set (PLM_TESTING_DATA_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Testing/Data")
 set (PLM_TESTING_DOWNLOAD_DATA_DIR "${CMAKE_BINARY_DIR}/TestData")
 set (PLM_BUILD_TESTING_DIR "${CMAKE_BINARY_DIR}/Testing")
 
@@ -342,7 +342,7 @@ find_package (wxWidgets)
 ##-----------------------------------------------------------------------------
 if (NOT LIBLBFGS_FOUND)
   add_subdirectory (libs/liblbfgs-1.9)
-  sb_set (LIBLBFGS_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/libs/liblbfgs-1.9/include")
+  sb_set (LIBLBFGS_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/liblbfgs-1.9/include")
   sb_set (LIBLBFGS_LIBRARIES lbfgs)
   link_directories (${CMAKE_CURRENT_BINARY_DIR}/libs/liblbfgs-1.9)
   sb_set (LIBLBFGS_FOUND TRUE)
@@ -353,7 +353,7 @@ endif ()
 ##-----------------------------------------------------------------------------
 if (NOT SQLITE_FOUND AND NOT PLM_CONFIG_DEBIAN_BUILD)
   add_subdirectory (libs/sqlite-3.6.21)
-  set (SQLITE_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/libs/sqlite-3.6.21")
+  set (SQLITE_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/sqlite-3.6.21")
   set (SQLITE_LIBRARIES sqlite3)
   set (SQLITE_FOUND TRUE)
 endif ()
@@ -361,13 +361,13 @@ endif ()
 #-----------------------------------------------------------------------------
 ##  Only use local devillard
 ##-----------------------------------------------------------------------------
-sb_set (DEVILLARD_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/libs/devillard")
+sb_set (DEVILLARD_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/devillard")
 add_subdirectory (libs/devillard)
 
 ##-----------------------------------------------------------------------------
 ##  Only use local inih
 ##-----------------------------------------------------------------------------
-sb_set (INIH_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/libs/inih-r29")
+sb_set (INIH_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/inih-r29")
 add_subdirectory (libs/inih-r29)
 
 ##-----------------------------------------------------------------------------
@@ -375,7 +375,7 @@ add_subdirectory (libs/inih-r29)
 ##-----------------------------------------------------------------------------
 # We can't use debian's lua 5.1 because it doesn't contain lobject.h
 #add_subdirectory (libs/lua-5.1.4)
-#set (LUA_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/libs/lua-5.1.4/src")
+#set (LUA_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/lua-5.1.4/src")
 #link_directories (${CMAKE_CURRENT_BINARY_DIR}/libs/lua-5.1.4)
 
 # for history, etc in plastimatch tty mode
@@ -392,12 +392,12 @@ sb_set (SPECFUN_FOUND TRUE)
 ##-----------------------------------------------------------------------------
 ##  Only use local msinttypes
 ##-----------------------------------------------------------------------------
-sb_set (MSINTTYPES_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/libs")
+sb_set (MSINTTYPES_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs")
 
 ##-----------------------------------------------------------------------------
 ##  Only use local nkidecompress
 ##-----------------------------------------------------------------------------
-sb_set (NKIDECOMPRESS_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/libs/nkidecompress")
+sb_set (NKIDECOMPRESS_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/nkidecompress")
 add_subdirectory (libs/nkidecompress)
 
 ##-----------------------------------------------------------------------------
@@ -513,7 +513,7 @@ set (PLM_BASIC_VERSION_STRING
   "${PLM_VERSION_MAJOR}.${PLM_VERSION_MINOR}.${PLM_VERSION_PATCH}")
 set (PLASTIMATCH_VERSION_STRING
   "${PLM_VERSION_MAJOR}.${PLM_VERSION_MINOR}.${PLM_VERSION_PATCH}")
-if (EXISTS "${CMAKE_SOURCE_DIR}/.git" AND GIT_FOUND)
+if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/.git" AND GIT_FOUND)
   if (GIT_EXECUTABLE MATCHES "[wW][sS][lL].*")
     set (GIT_EXECUTABLE "wsl;git")
   endif ()
@@ -521,7 +521,7 @@ if (EXISTS "${CMAKE_SOURCE_DIR}/.git" AND GIT_FOUND)
     COMMAND
     #${GIT_EXECUTABLE} rev-list --first-parent --count HEAD
     ${GIT_EXECUTABLE} ${GIT_EXECUTABLE_EXTRA} describe --always
-    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
+    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
     RESULT_VARIABLE git_result
     OUTPUT_VARIABLE git_output
     ERROR_VARIABLE git_error
@@ -647,7 +647,7 @@ endif ()
 ##-----------------------------------------------------------------------------
 ##  Only use local rapidjson
 ##-----------------------------------------------------------------------------
-set (RAPIDJSON_DIR "${CMAKE_SOURCE_DIR}/libs/rapidjson-2015-03-22")
+set (RAPIDJSON_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/rapidjson-2015-03-22")
 if (EXISTS "${RAPIDJSON_DIR}" AND IS_DIRECTORY "${RAPIDJSON_DIR}")
   set (RAPIDJSON_INCLUDE_DIR
     "${RAPIDJSON_DIR}/include"
@@ -723,7 +723,7 @@ endif ()
 
 # Add sample directory/files to Install Only for windows users
 if (WIN32 OR WIN64)
-  set (PLM_WINDOWS_INSTALL_DIR "${CMAKE_SOURCE_DIR}/extra/windows-install")
+  set (PLM_WINDOWS_INSTALL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/extra/windows-install")
   install (DIRECTORY "${PLM_WINDOWS_INSTALL_DIR}/sample" DESTINATION bin)
   install (FILES "${PLM_WINDOWS_INSTALL_DIR}/launch_cmd_prompt.bat" DESTINATION bin)
 endif ()
@@ -831,9 +831,9 @@ macro (PLM_ADD_TEST PLM_TEST_NAME PLM_TEST_COMMAND PARMS)
     -DPLM_BUILD_TESTING_DIR=${PLM_BUILD_TESTING_DIR}
     "-DPARMS=${TMP_PARMS}"
     ${EXTRA_PARMS}
-    -P ${CMAKE_SOURCE_DIR}/cmake/RUN_CTEST.cmake
+    -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/RUN_CTEST.cmake
     )
-#  message (STATUS "${CMAKE_COMMAND} -DPLM_TEST_NAME=${PLM_TEST_NAME} ${PLM_ITK_LIBRARY_PATH_HACK} ${PLM_PLASTIMATCH_PATH_HACK} ${PLM_FFTW_PATH_HACK} -DPLM_TEST_COMMAND=${PLM_TEST_COMMAND} -DPLM_TESTING_SOURCE_DIR=${PLM_TESTING_SOURCE_DIR} -DPLM_BUILD_TESTING_DIR=${PLM_BUILD_TESTING_DIR} \"-DPARMS=${TMP_PARMS}\" ${EXTRA_PARMS} -P ${CMAKE_SOURCE_DIR}/cmake/RUN_CTEST.cmake")
+#  message (STATUS "${CMAKE_COMMAND} -DPLM_TEST_NAME=${PLM_TEST_NAME} ${PLM_ITK_LIBRARY_PATH_HACK} ${PLM_PLASTIMATCH_PATH_HACK} ${PLM_FFTW_PATH_HACK} -DPLM_TEST_COMMAND=${PLM_TEST_COMMAND} -DPLM_TESTING_SOURCE_DIR=${PLM_TESTING_SOURCE_DIR} -DPLM_BUILD_TESTING_DIR=${PLM_BUILD_TESTING_DIR} \"-DPARMS=${TMP_PARMS}\" ${EXTRA_PARMS} -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/RUN_CTEST.cmake")
 endmacro ()
 
 # Figure out which tests to ignore
@@ -853,9 +853,9 @@ if (PLM_BUILD_TESTING)
   add_subdirectory (Testing)
 
   # Copy the lconv script
-  if (EXISTS "${CMAKE_SOURCE_DIR}/extra/devtools/run_lcov.sh")
+  if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/extra/devtools/run_lcov.sh")
     configure_file (
-      "${CMAKE_SOURCE_DIR}/extra/devtools/run_lcov.sh"
+      "${CMAKE_CURRENT_SOURCE_DIR}/extra/devtools/run_lcov.sh"
       "${CMAKE_BINARY_DIR}/run_lcov.sh"
       COPYONLY)
   endif ()
diff --git a/src/plastimatch/CMakeLists.txt b/src/plastimatch/CMakeLists.txt
index 86b9031d..2e203dbc 100644
--- a/src/plastimatch/CMakeLists.txt
+++ b/src/plastimatch/CMakeLists.txt
@@ -521,7 +521,7 @@ if (PLM_PACKAGE_LEGACY_CMAKE_CONFIG)
 
 else (PLM_PACKAGE_LEGACY_CMAKE_CONFIG)
   ## GCS: This is not working
-  #if (COMMENTOUT)
+  if (COMMENTOUT)
   include (CMakePackageConfigHelpers)
 
   # Make the version file
@@ -554,7 +554,7 @@ else (PLM_PACKAGE_LEGACY_CMAKE_CONFIG)
     DESTINATION "${PLM_INSTALL_CMAKE_DIR}"
     COMPONENT Devel
     )
-  #endif (COMMENTOUT)
+  endif (COMMENTOUT)
 endif (PLM_PACKAGE_LEGACY_CMAKE_CONFIG)
 
 ##-----------------------------------------------------------------------------
diff --git a/src/plastimatch/base/itk_dicom_load.cxx b/src/plastimatch/base/itk_dicom_load.cxx
index 56c17ae0..28be552f 100644
--- a/src/plastimatch/base/itk_dicom_load.cxx
+++ b/src/plastimatch/base/itk_dicom_load.cxx
@@ -99,14 +99,22 @@ load_dicom_dir_rdr(T rdr, const char *dicom_dir)
        DICOM files with empty fields.  Wow.  Anyway, we can't use them. 
        Possibly only with GDCM 1.X? */
 #if GDCM_MAJOR_VERSION == 2
-    /* Reject RTDOSE, which can get interpreted as an image (and gets 
+#if ITK_VERSION_MAJOR <= 4
+    /* Reject RTDOSE, which can get interpreted as an image (and gets
        read incorretly anyway).  Dose is read by rtds.cxx instead. */
-    gdcm::SerieHelper* gsh = nameGenerator->GetSeriesHelper ();
+    gdcm::SerieHelper* gsh = nameGenerator->GetSerieHelper();
     gsh->AddRestriction (0x0008, 0x0060, "RTDOSE", gdcm::GDCM_DIFFERENT);
     /* Reject GE Scouts */
     gsh->AddRestriction (0x0018, 0x0022, "SCOUT MODE", gdcm::GDCM_DIFFERENT);
     /* Reject GE Dose reports */
     gsh->AddRestriction (0x0008, 0x103e, "Dose Report", gdcm::GDCM_DIFFERENT);
+#else
+    nameGenerator->AddSeriesRestriction("0x0008|0x0060");
+    /* Reject GE Scouts */
+    nameGenerator->AddSeriesRestriction("0x0018|0x0022");
+    /* Reject GE Dose reports */
+    nameGenerator->AddSeriesRestriction("0x0008|0x103e");
+#endif
 #endif
 
     nameGenerator->SetDirectory (dicom_dir);
diff --git a/src/plastimatch/base/rasterizer.cxx b/src/plastimatch/base/rasterizer.cxx
index eb8d363a..770754aa 100644
--- a/src/plastimatch/base/rasterizer.cxx
+++ b/src/plastimatch/base/rasterizer.cxx
@@ -227,12 +227,21 @@ Rasterizer::process_next (
                    and destruct of itk::VariableLengthVector of each pixel */
                 UCharVecImageType::IndexType idx = {{0, 0, slice_no}};
                 size_t k = 0;
-                for (idx.m_Index[1] = 0; 
+#if ITK_VERSION_MAJOR < 5
+                for (idx.m_Index = 0;
                      idx.m_Index[1] < this->dim[1]; 
                      idx.m_Index[1]++) {
                     for (idx.m_Index[0] = 0; 
                          idx.m_Index[0] < this->dim[0]; 
                          idx.m_Index[0]++) {
+#else
+                for (idx.m_InternalArray[1] = 0;
+                     idx.m_InternalArray[1] < this->dim[1];
+                     idx.m_InternalArray[1]++) {
+                    for (idx.m_InternalArray[0] = 0;
+                         idx.m_InternalArray[0] < this->dim[0];
+                         idx.m_InternalArray[0]++) {
+#endif
                         if (this->acc_img[k]) {
                             itk::VariableLengthVector<unsigned char> v 
                                 = ss_img->GetPixel (idx);
diff --git a/src/plastimatch/register/registration.cxx b/src/plastimatch/register/registration.cxx
index 3865669b..24648ed5 100644
--- a/src/plastimatch/register/registration.cxx
+++ b/src/plastimatch/register/registration.cxx
@@ -40,10 +40,15 @@ public:
     Xform::Pointer xf_in;
     Xform::Pointer xf_out;
 
-    itk::MultiThreader::Pointer threader;
     Dlib_master_slave master_slave;
     Dlib_semaphore worker_running;
+#if ITK_VERSION_MAJOR < 5
+    itk::MultiThreader::Pointer threader;
     int thread_no;
+#else
+    std::thread thread_obj;
+    std::thread::id thread_no;
+#endif
     bool time_to_quit;
 
 public:
@@ -53,13 +58,18 @@ public:
         xf_in = Xform::New ();
         xf_out = Xform::New ();
 
+#if ITK_VERSION_MAJOR < 5
         threader = itk::MultiThreader::New ();
         thread_no = -1;
+#endif
         time_to_quit = false;
     }
     ~Registration_private () {
         this->time_to_quit = true;
         // do something more here ... wait for running threads to exit
+#if ITK_VERSION_MAJOR >= 5
+        thread_obj.join();
+#endif
     }
 };
 
@@ -596,8 +606,13 @@ Registration::start_registration ()
     d_ptr->time_to_quit = false;
     printf ("Launching registration worker thread\n");
     d_ptr->worker_running.grab ();
+#if ITK_VERSION_MAJOR < 5
     d_ptr->thread_no = d_ptr->threader->SpawnThread (
-        registration_main_thread, (void*) this);
+                registration_main_thread, (void*) this);
+#else
+    d_ptr->thread_obj = std::thread(registration_main_thread, (void*) this);
+    d_ptr->thread_no = d_ptr->thread_obj.get_id();
+#endif
 }
 
 void 
