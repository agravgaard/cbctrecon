variables:
    GIT_STRATEGY: clone
    CUDA_AVAILABLE: "NO"
    COVERAGE: "NO"


Ubuntu-gcc9-superbuild:
    stage: test
    tags:
      - linux
      - docker
      - gpu
    image: andreasga/cbctrecon:gcc-9-x86_64
    script:
      - export CC=/usr/bin/gcc-9
      - export CXX=/usr/bin/g++-9
      - ./ci/ci.sh

Ubuntu-gcc9-CUDA:
    stage: test
    tags:
      - linux
      - docker
      - cuda
      - gpu
    image: andreasga/cbctrecon:gcc-9-CUDA-x86_64
    variables:
      CUDA_AVAILABLE: "YES"
      COVERAGE: "YES"
    script:
      - export CC=/usr/bin/gcc-9
      - export CXX=/usr/bin/g++-9
      - ./ci/ci.sh

Ubuntu-gcc9-coverage-prebuild-deps:
    stage: test
    tags:
      - linux
      - docker
      - gpu
    image: andreasga/cbctrecon:gcc-9-x86_64-libDCMTK-ITK-RTK
    variables:
      COVERAGE: "YES"
    script:
      - export CC=/usr/bin/gcc-9
      - export CXX=/usr/bin/g++-9
      - ./ci/ci.sh


Ubuntu-clang11-prebuild-deps:
    stage: test
    tags:
      - linux
      - docker
      - gpu
    image: andreasga/cbctrecon:clang-11-x86_64-libDCMTK-ITK-RTK
    script:
      - export CC=/usr/local/bin/clang
      - export CXX=/usr/local/bin/clang++
      - ./ci/ci.sh

Ubuntu-clang11-ROCm:
    stage: test
    tags:
      - linux
      - docker
      - rocm
# Our ROCm docker exported gfx900 as the target arch, so:
      - vega
      - gpu
    image: andreasga/cbctrecon:clang-11-ROCm-x86_64
    script:
      - export CC=/opt/rocm/hip/bin/hipcc
      - export CXX=/opt/rocm/hip/bin/hipcc
      - export CXXFLAGS="-stdlib=libc++"
      - export CUSTOM_CMAKE_FLAGS="-DOpenMP_CXX_FLAGS='-fopenmp=libomp' -DOpenMP_CXX_LIB_NAMES=omp"
      - ./ci/ci.sh

Windows10-msvc2019-CUDA:
    stage: test
    tags:
      - windows
      - gpu
      - shell
    script:
      - Import-Module "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
      - Enter-VsDevShell 512426f1
      - $env:CUDA_PATH = "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2"
      - mkdir build
      - cd build
      - cmake -G"Visual Studio 16 2019" -A"x64" .. `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_CXX_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG /Zc:__cplusplus" `
          -DCMAKE_C_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG" `
          -DCMAKE_PREFIX_PATH="C:/Qt/5.14.2/msvc2017_64/" `
          -DHUNTER_ENABLED=OFF `
          -DRTK_USE_OPENCL=ON `
          -DUSE_CUDA=ON `
          -DITK_DIR="C:/Program Files (x86)/ITK/lib/cmake/ITK-5.1" `
          -DUSE_SYSTEM_DCMTK=ON `
          -DDCMTK_DIR="C:/Program Files (x86)/DCMTK/cmake/" `
          -DUSE_SYSTEM_Plastimatch=OFF `
          -DUSE_SYSTEM_ZLIB=ON `
          -DUSE_SYSTEM_dlib=ON `
          -Ddlib_DIR="C:/Program Files (x86)/dlib_project/lib/cmake/dlib/"
      - cmake --build . --config Release -j 12
      - cmake --build . --config Release --target INSTALL
# Copy TBB dll's linked to by local ITK install (Could and maybe should be done in CMake)
      - cp "C:\Users\au451932\Projects\tbb\build\vs2013\x64\Release-MT\tbb.dll" .\bin\
      - cp "C:\Users\au451932\Projects\tbb\build\vs2013\x64\Release-MT\tbbmalloc.dll" .\bin\
      - cp "C:\Users\au451932\Projects\tbb\build\vs2013\x64\Release-MT\tbbmalloc_proxy.dll" .\bin\
      - ctest -VV -C Release

