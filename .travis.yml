language: cpp

matrix:
  include:
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'libfftw3-3', 'libfftw3-dev', 'ocl-icd-opencl-dev', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: TOOLSET=g++-5 CUDA=NONE

    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'lcov', 'libfftw3-3', 'libfftw3-dev', 'ocl-icd-opencl-dev', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: TOOLSET=g++-5 CBCTRECON_COVERAGE=ON CUDA=8.0.61-1

    - os: linux
      dist: trusty
      sudo: false
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-8']
          packages: ['clang-8', 'libfftw3-3', 'libfftw3-dev', 'ocl-icd-opencl-dev', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: TOOLSET=clang++-8 CUDA=NONE

    - os: linux
      dist: trusty
      sudo: false
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-8']
          packages: ['clang-8', 'libfftw3-3', 'libfftw3-dev', 'ocl-icd-opencl-dev', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: TOOLSET=clang++-8 CUDA=NONE

    - os: osx
      osx_image: xcode9.2
      compiler: clang
      env: TOOLSET=clang++ CUDA=NONE



before_install:
  - if test "$CUDA" != NONE; then echo "Installing CUDA library"; fi
  - if test "$CUDA" != NONE; then travis_retry wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_${CUDA}_amd64.deb; fi
  - if test "$CUDA" != NONE; then travis_retry sudo dpkg -i cuda-repo-ubuntu1404_${CUDA}_amd64.deb; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt-get update -qq; fi
  - if test "$CUDA" != NONE; then export CUDA_APT=${CUDA%-*}; fi
  - if test "$CUDA" != NONE; then export CUDA_APT=${CUDA_APT/./-}; fi
  - if test "$CUDA" != NONE; then export CUDA_APT=${CUDA_APT:0:3}; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt-get install -y cuda-drivers cuda-core-${CUDA_APT} cuda-cudart-dev-${CUDA_APT}; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt-get install -y cuda-cufft-${CUDA_APT} cuda-cufft-dev-${CUDA_APT}; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt-get install -y cuda-cublas-${CUDA_APT} cuda-cublas-dev-${CUDA_APT}; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt-get clean; fi
  - if test "$CUDA" != NONE; then export CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-${CUDA%%-*}; fi
  - if test "$CUDA" != NONE; then export PATH=${CUDA_TOOLKIT_ROOT_DIR}/bin:${PATH}; fi
  - if test "$CUDA" != NONE; then export USECUDA=ON; else export USECUDA=OFF; fi
  - if test $TRAVIS_OS_NAME == osx ; then HOMEBREW_NO_AUTO_UPDATE=1 brew install fftw || true ; brew link --overwrite fftw || true ; fi
  - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
  - export CXXFLAGS="-fPIC -std=c++14"

install:
  - cd ../

  - if [[ "$CBCTRECON_COVERAGE" == "ON" ]]; then pip install --user cpp-coveralls; fi

  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then wget --no-check-certificate https://www.cmake.org/files/v3.13/cmake-3.13.4-Linux-x86_64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then tar -xzf cmake-3.13.4-Linux-x86_64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CMAKE=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Linux-x86_64/bin/cmake; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CTEST=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Linux-x86_64/bin/ctest; fi

  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then wget --no-check-certificate https://cmake.org/files/v3.13/cmake-3.13.4-Darwin-x86_64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then tar -xzf cmake-3.13.4-Darwin-x86_64.tar.gz && ls && ls cmake-3.13.4-Darwin-x86_64; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export CMAKE=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Darwin-x86_64/CMake.app/Contents/bin/cmake; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CTEST=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Linux-x86_64/bin/ctest; fi

  - export CXX=$TOOLSET
  - $CXX --version
  - $CMAKE --version

  - cd cbctrecon/
  - git config --global user.email "andreasga22@gmail.com"
  - git config --global user.name "Andreas Gravgaard Andersen"

script:
  - mkdir build/ && cd build/
  - $CMAKE -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_FLAGS="-Werror -pedantic -Wall -Wextra -Wconversion -Wsign-conversion -Wno-parentheses -Wno-assume" ../ -DCBCTRECON_COVERAGE=$CBCTRECON_COVERAGE -DUSE_CUDA=$USECUDA
  - $CMAKE .
  - $CMAKE --build .
  - $CTEST

after_script:
  - if [[ "$CBCTRECON_COVERAGE" == "ON" ]]; then $CMAKE --build . --target CbctRecon_coverage && cd ../ && coveralls --no-gcov --lcov-file build/CbctRecon_coverage.info.cleaned; fi
