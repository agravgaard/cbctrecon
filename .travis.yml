language: cpp

matrix:
  include:
    - os: linux
      dist: xenial
      sudo: false
      compiler: gcc-8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['gcc-8', 'libomp-dev', 'libfftw3-3', 'libfftw3-dev', 'mesa-common-dev', 'ocl-icd-opencl-dev', 'ocl-icd-dev', 'opencl-headers', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: CC_VER=8 CUDA=NONE MACCUDA=NONE

    - os: linux
      dist: xenial
      sudo: false
      compiler: gcc-8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['gcc-8', 'libomp-dev', 'lcov', 'libfftw3-3', 'libfftw3-dev', 'mesa-common-dev', 'ocl-icd-opencl-dev', 'ocl-icd-dev', 'opencl-headers', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: CC_VER=8 CBCTRECON_COVERAGE=ON CUDA=10.1.105-1 MACCUDA=NONE

    - os: linux
      dist: xenial
      sudo: false
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-xenial-7']
          packages: ['libomp-dev', 'libfftw3-3', 'libfftw3-dev', 'mesa-common-dev', 'ocl-icd-opencl-dev', 'ocl-icd-dev', 'opencl-headers', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: CC_VER=DEFAULT CUDA=NONE MACCUDA=NONE

    - os: linux
      dist: xenial
      sudo: false
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-xenial-7']
          packages: ['libomp-dev', 'libfftw3-3', 'libfftw3-dev', 'mesa-common-dev', 'ocl-icd-opencl-dev', 'ocl-icd-dev', 'opencl-headers', 'libsqlite3-dev', 'clinfo', 'qt-default', 'libqt5opengl5-dev']
      env: CC_VER=DEFAULT CUDA=10.1.105-1 MACCUDA=NONE

    - os: osx
      osx_image: xcode10
      compiler: clang
      addons:
        homebrew:
          tap:
            - homebrew/cask-drivers
          casks:
            - nvidia-cuda
          packages:
            - fftw
            - qt
            - libomp
            - clinfo
          update: true
      env: CC_VER=DEFAULT CUDA=NONE MACCUDA=10.1

    - os: osx
      osx_image: xcode10
      compiler: clang
      addons:
        homebrew:
          packages:
            - fftw
            - qt
            - libomp
            - clinfo
          update: true
      env: CC_VER=DEFAULT CUDA=NONE MACCUDA=NONE



before_install:
  - export OMP_NUM_THREADS=4
  - if test "$CC_VER" != DEFAULT; then export CC=$CC-$CC_VER; fi
  - if test "$CC_VER" != DEFAULT; then export CXX=$CXX-$CC_VER; fi
  - if test "$CUDA" != NONE; then echo "Installing CUDA library"; fi
  - if test "$CUDA" != NONE; then travis_retry wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_${CUDA}_amd64.deb; fi
  - if test "$CUDA" != NONE; then travis_retry sudo dpkg -i cuda-repo-ubuntu1604_${CUDA}_amd64.deb; fi
  - if test "$CUDA" != NONE; then sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt update -qq; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt install -y cuda; fi
  - if test "$CUDA" != NONE; then travis_retry sudo apt clean; fi
  - if test "$CUDA" != NONE; then export CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-${CUDA%%-*}; fi
  - if test "$CUDA" != NONE; then export PATH=${CUDA_TOOLKIT_ROOT_DIR}/bin:${PATH}; fi
  - if test "$CUDA" != NONE; then export USECUDA=ON; else export USECUDA=OFF; fi
  - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")

  - if test "$MACCUDA" != NONE; then export PATH=/Developer/NVIDIA/CUDA-$MACCUDA/bin${PATH:+:${PATH}}; fi
  - if test "$MACCUDA" != NONE; then export DYLD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-$MACCUDA/lib${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}; fi
  - if test "$MACCUDA" != NONE; then export USECUDA=ON; else export USECUDA=OFF; fi
  - if test "$MACCUDA" != NONE; then export CUDA_TOOLKIT_ROOT_DIR=/Developer/NVIDIA/CUDA-$MACCUDA; fi

install:
  - cd ../

  - if [[ "$CBCTRECON_COVERAGE" == "ON" ]]; then pip install --user cpp-coveralls; fi

  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo bash ./cbctrecon/.travis/install_intel_opencl.sh; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then wget --no-check-certificate https://www.cmake.org/files/v3.13/cmake-3.13.4-Linux-x86_64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then tar -xzf cmake-3.13.4-Linux-x86_64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CMAKE=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Linux-x86_64/bin/cmake; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CTEST=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Linux-x86_64/bin/ctest; fi

  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then wget --no-check-certificate https://cmake.org/files/v3.13/cmake-3.13.4-Darwin-x86_64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then tar -xzf cmake-3.13.4-Darwin-x86_64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export CMAKE=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Darwin-x86_64/CMake.app/Contents/bin/cmake; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export CTEST=$TRAVIS_BUILD_DIR/../cmake-3.13.4-Darwin-x86_64/CMake.app/Contents/bin/ctest; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export PATH="/usr/local/opt/qt/bin:$PATH"; fi

  - $CXX --version
  - $CMAKE --version
  - clinfo

  - cd cbctrecon/
  - git config --global user.email "andreasga22@gmail.com"
  - git config --global user.name "Andreas Gravgaard Andersen"

script:
  - mkdir build/ && cd build/
  - $CMAKE -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF ../ -DCBCTRECON_COVERAGE=$CBCTRECON_COVERAGE -DUSE_CUDA=$USECUDA -DCUDA_TOOLKIT_ROOT_DIR=$CUDA_TOOLKIT_ROOT_DIR
  - $CMAKE .
  - $CMAKE --build .
  - $CTEST

after_script:
  - if [[ "$CBCTRECON_COVERAGE" == "ON" ]]; then $CMAKE --build . --target CbctRecon_coverage && cd ../ && coveralls --no-gcov --lcov-file build/CbctRecon_coverage.info.cleaned; fi
