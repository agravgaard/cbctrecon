set (PLM_CONFIG_DEBIAN_BUILD @PLM_CONFIG_DEBIAN_BUILD@)
set (CMAKE_Fortran_COMPILER_WORKS @CMAKE_Fortran_COMPILER_WORKS@)
set (CUDA_FOUND @CUDA_FOUND@)
set (FFTW_FOUND @FFTW_FOUND@)
set (ITK_VERSION "@ITK_VERSION@")
set (OPENCL_FOUND @OPENCL_FOUND@)
set (PLM_DCM_USE_DCMTK "@PLM_DCM_USE_DCMTK@")
set (PLM_DCM_USE_GDCM1 "@PLM_DCM_USE_GDCM1@")
set (PLM_DCM_USE_GDCM2 "@PLM_DCM_USE_GDCM2@")
set (PLM_PLASTIMATCH_PATH "@PLM_PLASTIMATCH_PATH@")
set (PLM_PLASTIMATCH_PATH_HACK "@PLM_PLASTIMATCH_PATH_HACK@")
set (PLM_REDUCED_TESTS @PLM_REDUCED_TESTS@)
set (PLM_TEST_DICOM @PLM_TEST_DICOM@)
set (PLM_BUILD_TESTING_DIR "@PLM_BUILD_TESTING_DIR@")
set (CMAKE_HOST_SYSTEM_PROCESSOR "@CMAKE_HOST_SYSTEM_PROCESSOR@")

## If we don't have functioning CUDA, don't run CUDA tests
set (RUN_CUDA_TESTS OFF)
if (CUDA_FOUND)
  execute_process (COMMAND 
    "${PLM_PLASTIMATCH_PATH}/cuda_probe"
    RESULT_VARIABLE CUDA_PROBE_RESULT
    OUTPUT_VARIABLE CUDA_PROBE_STDOUT
    ERROR_VARIABLE CUDA_PROBE_STDERR
    )
  file (WRITE "${PLM_BUILD_TESTING_DIR}/cuda_probe_result.txt"
    "${CUDA_PROBE_RESULT}")
  file (WRITE "${PLM_BUILD_TESTING_DIR}/cuda_probe_stdout.txt"
    "${CUDA_PROBE_STDOUT}")
  file (WRITE "${PLM_BUILD_TESTING_DIR}/cuda_probe_stderr.txt"
    "${CUDA_PROBE_STDERR}")
  string (REGEX MATCH "NOT cuda capable" CUDA_PROBE_NOT_CAPABLE
    "${CUDA_PROBE_STDOUT}")
  if (NOT CUDA_PROBE_RESULT AND NOT CUDA_PROBE_NOT_CAPABLE)
    set (RUN_CUDA_TESTS ON)
  endif ()
endif ()

## If we don't have functioning OpenCL, don't run OpenCL tests
set (RUN_OPENCL_TESTS OFF)
if (OPENCL_FOUND)
  execute_process (COMMAND 
    "${PLM_PLASTIMATCH_PATH}/opencl_probe"
    RESULT_VARIABLE OPENCL_PROBE_RESULT
    OUTPUT_VARIABLE OPENCL_PROBE_STDOUT
    ERROR_VARIABLE OPENCL_PROBE_STDERR
    )
  file (WRITE "${PLM_BUILD_TESTING_DIR}/opencl_probe_result.txt"
    "${OPENCL_PROBE_RESULT}")
  file (WRITE "${PLM_BUILD_TESTING_DIR}/opencl_probe_stdout.txt"
    "${OPENCL_PROBE_STDOUT}")
  file (WRITE "${PLM_BUILD_TESTING_DIR}/opencl_probe_stderr.txt"
    "${OPENCL_PROBE_STDERR}")
  string (REGEX MATCH "Opencl does not work" OPENCL_PROBE_NOT_CAPABLE
    "${OPENCL_PROBE_STDOUT}")
  if (NOT OPENCL_PROBE_RESULT AND NOT OPENCL_PROBE_NOT_CAPABLE)
    set (RUN_OPENCL_TESTS ON)
  endif ()
endif ()

# OpenCL tests disabled/issue #30
set (RUN_OPENCL_TESTS OFF)

# In ITK 3.20.1 (official release), masked registration is broken
if (NOT ${ITK_VERSION} VERSION_GREATER "3.20.1")
set (CTEST_CUSTOM_TESTS_IGNORE
  ${CTEST_CUSTOM_TESTS_IGNORE}
  "plm-reg-roi-b"
  )
endif ()

# plm-convert-rtog-corvus-a doen't work yet
set (CTEST_CUSTOM_TESTS_IGNORE
  ${CTEST_CUSTOM_TESTS_IGNORE}
  "plm-convert-rtog-corvus-a"
  )

# drr-d doesn't work yet
set (CTEST_CUSTOM_TESTS_IGNORE
  ${CTEST_CUSTOM_TESTS_IGNORE}
  "drr-d"
  "drr-d-stats"
  "drr-d-check"
  )

# plm-reg-itk-rigid-b doesn't work yet
set (CTEST_CUSTOM_TESTS_IGNORE
  ${CTEST_CUSTOM_TESTS_IGNORE}
  "plm-reg-itk-rigid-b"
  "plm-reg-itk-rigid-b-stats-1"
  "plm-reg-itk-rigid-b-check-1"
  )

## If we don't have a fortran compiler, don't test bragg_curve
if (NOT CMAKE_Fortran_COMPILER_WORKS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "bragg-curve"
    "bragg-curve-check"
    )
endif ()

## If we didn't get XiO dicom-rt test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/dicomrt-xio-4.33.02-chest-phantom")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-xio-a"
    "plm-convert-dicom-xio-a-stats"
    "plm-convert-dicom-xio-a-check"
    "plm-convert-dicom-xio-b"
    "plm-convert-dicom-xio-b-stats"
    "plm-convert-dicom-xio-b-check"
    "plm-convert-dicom-xio-c"
    "plm-convert-dicom-xio-c-stats"
    "plm-convert-dicom-xio-c-check"
    "plm-convert-dicom-xio-d"
    "plm-convert-dicom-xio-d-stats"
    "plm-convert-dicom-xio-d-check"
    "plm-convert-dicom-xio-e"
    "plm-convert-dicom-xio-f"
    "plm-convert-dicom-xio-f-stats"
    "plm-convert-dicom-xio-f-check"
    "plm-convert-dicom-xio-g"

    "plm-warp-dicom-xio-a"
    "plm-warp-dicom-xio-a-stats-1"
    "plm-warp-dicom-xio-a-check-1"
    "plm-warp-dicom-xio-a-stats-2"
    "plm-warp-dicom-xio-a-check-2"
    )
endif ()

## If we didn't get xio test data, don't run xio tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/xio-4.33.02-chest-phantom")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-xio-a"
    "plm-convert-xio-a-stats"
    "plm-convert-xio-a-check"
    "plm-convert-xio-b"
    "plm-convert-xio-b-stats"
    "plm-convert-xio-b-check"
    "plm-warp-xio-a"
    "plm-warp-xio-a-stats-1"
    "plm-warp-xio-a-check-1"
    "plm-warp-xio-a-stats-2"
    "plm-warp-xio-a-check-2"
    "plm-warp-xio-a-stats-3"
    "plm-warp-xio-a-check-3"
    "plm-warp-xio-a-stats-4"
    "plm-warp-xio-a-check-4"
    "plm-warp-xio-a-check-5"
    "plm-warp-xio-a-check-6"
    )
endif ()

## If we didn't get rtog (corvus) test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/rtog-corvus-6.2.2")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-rtog-corvus-a" 
    )
endif ()

## If we didn't get aw (foot) test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/dicomrt-aw-4.4-foot")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-aw-a" 
    "plm-convert-dicom-aw-a-stats" 
    "plm-convert-dicom-aw-a-check" 
    "plm-convert-dicom-aw-b" 
    )
endif ()

## If we didn't get cerr test data, don't run these tests
# if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/chest-phantom-dicomrt-CERR4pt0beta2_25_Jan_2011")
#   set (CTEST_CUSTOM_TESTS_IGNORE
#     ${CTEST_CUSTOM_TESTS_IGNORE}
#     "plm-convert-dicom-cerr-a" 
#     )
# endif ()

## If we didn't get corvus test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/dicomrt-corvus-6.2.2")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-corvus-a" 
    )
endif ()

## If we didn't get xio irregular test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/xio-4.60-irregular-spacing")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-irregular-a" 
    )
endif ()

## If we didn't get pinnacle test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/dicomrt-pinnacle3-8.2g-rando")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-pinnacle-a" 
    )
endif ()

## If we didn't get test data w 33 structures, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/dicomrt-33-structures")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-33-a" 
    "plm-convert-dicom-33-a-stats-1" 
    "plm-convert-dicom-33-a-stats-2" 
    "plm-convert-dicom-33-a-check-1" 
    "plm-convert-dicom-33-a-check-2" 
    )
endif ()

## If we didn't get varian fdk test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/varian-catphan-subset")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "fdk-cpu-b"
    "fdk-cpu-b-stats"
    "fdk-cpu-b-check"
    "fdk-cpu-c"
    "fdk-cpu-c-stats"
    "fdk-cpu-c-check"
    )
endif ()

## If we didn't get headphantom test data, don't run these tests
if (NOT EXISTS "${PLM_BUILD_TESTING_DIR}/headphantom")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "fdk-tutorial-a"
    "fdk-tutorial-b"
    "fdk-tutorial-b-stats-1"
    "fdk-tutorial-b-check-1"
    "fdk-tutorial-c"
    "fdk-tutorial-c-stats-1"
    "fdk-tutorial-c-check-1"
    )
endif ()

## If we don't have fftw, don't run these tests
if (NOT FFTW_FOUND)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "fdk-cpu-c"
    "fdk-cpu-c-stats"
    "fdk-cpu-c-check"
    "fdk-tutorial-c"
    "fdk-tutorial-c-stats-1"
    "fdk-tutorial-c-check-1"
    )
endif ()

## If we didn't compile with cuda, don't run these tests
if (NOT RUN_CUDA_TESTS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "demons-cuda-a"
    "demons-cuda-a-check"
    "drr-cuda"
    "drr-cuda-stats"
    "drr-cuda-check"
    "fdk-cuda-a"
    "fdk-cuda-a-stats"
    "fdk-cuda-a-check"
    "plm-bsp-cuda" 
    "plm-bsp-cuda-stats" 
    "plm-bsp-cuda-check" 
    )
endif ()

## If we didn't compile with opencl, don't run these tests
if (NOT RUN_OPENCL_TESTS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "drr-opencl"
    "drr-opencl-stats"
    "drr-opencl-check"
    "fdk-opencl-a"
    "fdk-opencl-a-stats"
    "fdk-opencl-a-check"
    ) 
endif ()

## If we are using DCMTK, don't run these tests
if (PLM_DCM_USE_DCMTK)
    set (CTEST_CUSTOM_TESTS_IGNORE
	${CTEST_CUSTOM_TESTS_IGNORE}
	"plm-convert-dicom-b-stats"
	"plm-convert-dicom-b-check"
	)
endif ()

## If we're not using dcmtk for dicom, don't run these tests
if (NOT PLM_DCM_USE_DCMTK)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-irregular-a" 
    )
endif ()

## If we only have GDCM 2, don't run these tests
if (PLM_DCM_USE_GDCM2)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-donut-a" 
    "plm-convert-dicom-donut-a-stats" 
    "plm-convert-dicom-donut-a-check" 
    "plm-convert-dicom-donut-b" 
    "plm-convert-dicom-donut-b-stats" 
    "plm-convert-dicom-donut-b-check" 
    "plm-convert-dicom-a"
    "plm-convert-dicom-a-stats" 
    "plm-convert-dicom-a-check" 
    "plm-convert-dicom-b"
    "plm-convert-dicom-b-stats"
    "plm-convert-dicom-b-check"
    "plm-convert-dicom-c" 
    "plm-convert-dicom-c-stats" 
    "plm-convert-dicom-c-check" 
    "plm-convert-dicom-f" 
    "plm-convert-cxt"
    "plm-convert-cxt-stats"
    "plm-convert-cxt-check"
    )
endif ()

## Dose calculation not yet supported on debian
if (PLM_CONFIG_DEBIAN_BUILD)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "proton-dose-1"
    "proton-dose-1-stats"
    "proton-dose-1-check"
    "proton-dose-2"
    "proton-dose-2-stats"
    "proton-dose-2-check"
    "proton-dose-3"
    "proton-dose-3-stats"
    "proton-dose-3-check"
    "proton-dose-5a"
    "proton-dose-5a-stats"
    "proton-dose-5a-check"
    "proton-dose-5d"
    "proton-dose-5d-stats"
    "proton-dose-5d-check"
    "proton-dose-5g"
    "proton-dose-5g-stats"
    "proton-dose-5g-check"
    "proton-dose-6a"
    "proton-dose-6a-stats"
    "proton-dose-6a-check"
    )
endif ()

## Debian on MIPS causes timeout because the build machine is too slow.
## So we just skip these tests
if (PLM_CONFIG_DEBIAN_BUILD AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "mips")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "bspline-mi-c-1"
    "bspline-mi-c-1-check"
    "bspline-mi-c-2"
    "bspline-mi-c-2-check"
    "fdk-cpu-d"
    "fdk-cpu-d-stats"
    "fdk-cpu-d-check"
    "plm-bsp-regularize-numeric"
    "plm-bsp-regularize-numeric-stats"
    "plm-bsp-regularize-numeric-check"
    "plm-resample-c"         ## GCS FIX: This depends on mi-c-1
    "plm-resample-c-stats" 
    "plm-resample-c-check" 
    )
endif ()

## Don't delete from the list, comment out instead.
if (PLM_REDUCED_TESTS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "black-1"
    "donut-1"
    "gauss-1"
    "gauss-2"
    "gauss-3"
    "gauss-4"
    "gauss-5"
    "gauss-6"
    "gauss-ushort-1"
    "gauss-ushort-2"
    "gauss-double-1"
    "gauss-double-2"
    "rect-1"
    "rect-2"
    "rect-3"
    "rect-4"
    "rect-5"
    "rect-6"
    "rect-7"
    "sphere-1"
    "sphere-2"
    "sphere-3"

    "vf-zero"
    "vf-trans-1"
    "vf-radial-1"

    "vf-zero-stats"
    "vf-zero-check"
    "vf-trans-1-stats"
    "vf-trans-1-check"
    "vf-radial-1-stats"
    "vf-radial-1-check"

    "bspline-c"
    "bspline-c-check"
    "bspline-g"
    "bspline-g-check"
    "bspline-h"
    "bspline-h-check"
    "bspline-mi-c-1"
    "bspline-mi-c-1-check"
    "bspline-mi-c-2"
    "bspline-mi-c-2-check"

    "demons-a"
    "demons-a-check"
    "demons-cuda-a"
    "demons-cuda-a-check"

    "drr-a"
    "drr-a-stats"
    "drr-a-check"
    "drr-b"
    "drr-b-stats"
    "drr-b-check"
    "drr-c"
    "drr-c-stats"
    "drr-c-check"
    "drr-cuda"
    "drr-cuda-stats"
    "drr-cuda-check"
    "drr-opencl"
    "drr-opencl-stats"
    "drr-opencl-check"

    "fdk-cpu-a"
    "fdk-cpu-a-stats"
    "fdk-cpu-a-check"
    "fdk-cpu-b"
    "fdk-cpu-b-stats"
    "fdk-cpu-b-check"
    "fdk-cpu-c"
    "fdk-cpu-c-stats"
    "fdk-cpu-c-check"
    "fdk-cpu-d"
    "fdk-cpu-d-stats"
    "fdk-cpu-d-check"
    "fdk-cuda-a"
    "fdk-cuda-a-stats"
    "fdk-cuda-a-check"
    "fdk-opencl-a"
    "fdk-opencl-a-stats"
    "fdk-opencl-a-check"

    "fdk-tutorial-a"
    "fdk-tutorial-b"
    "fdk-tutorial-b-stats-1"
    "fdk-tutorial-b-check-1"
    "fdk-tutorial-c"
    "fdk-tutorial-c-stats-1"
    "fdk-tutorial-c-check-1"

    "landmark-warp-a"
    "landmark-warp-a-stats-1"
    "landmark-warp-a-check-1"
    "landmark-warp-a-stats-2"
    "landmark-warp-a-check-2"
    "landmark-warp-b"
    "landmark-warp-b-stats-1"
    "landmark-warp-b-check-1"
    "landmark-warp-b-stats-2"
    "landmark-warp-b-check-2"
    "landmark-warp-c"
    "landmark-warp-c-stats-1"
    "landmark-warp-c-check-1"
    "landmark-warp-c-stats-2"
    "landmark-warp-c-check-2"

    "plm-convert-dicom-a"
    "plm-convert-dicom-a-stats"
    "plm-convert-dicom-a-check"
    "plm-convert-dicom-b"
    "plm-convert-dicom-b-stats"
    "plm-convert-dicom-b-check"

    "plm-convert-rtog-corvus-a"
    "plm-convert-dicom-aw-a"
    "plm-convert-dicom-aw-a-stats"
    "plm-convert-dicom-aw-a-check"
    "plm-convert-dicom-aw-b"
    "plm-convert-dicom-cerr-a"
    "plm-convert-dicom-corvus-a" 
    "plm-convert-dicom-pinnacle-a"

    "plm-convert-dicom-xio-a"
    "plm-convert-dicom-xio-a-stats"
    "plm-convert-dicom-xio-a-check"
    "plm-convert-dicom-xio-b"
    "plm-convert-dicom-xio-b-stats"
    "plm-convert-dicom-xio-b-check"
    "plm-convert-dicom-xio-c"
    "plm-convert-dicom-xio-c-stats"
    "plm-convert-dicom-xio-c-check"
    "plm-convert-dicom-xio-d"
    "plm-convert-dicom-xio-d-stats"
    "plm-convert-dicom-xio-d-check"
    "plm-convert-dicom-xio-e"
    "plm-convert-dicom-xio-f"
    "plm-convert-dicom-xio-f-stats"
    "plm-convert-dicom-xio-f-check"
    "plm-warp-dicom-xio-a" 
    "plm-warp-dicom-xio-a-stats-1"
    "plm-warp-dicom-xio-a-check-1"
    "plm-warp-dicom-xio-a-stats-2"
    "plm-warp-dicom-xio-a-check-2"

    "plm-convert-cxt"
    "plm-convert-cxt-stats"
    "plm-convert-cxt-check"

    "plm-convert-xio-a"
    "plm-convert-xio-a-stats"
    "plm-convert-xio-a-check"
    "plm-convert-xio-b"
    "plm-convert-xio-b-stats"
    "plm-convert-xio-b-check"
    "plm-warp-xio-a" 
    "plm-warp-xio-a-stats-1"
    "plm-warp-xio-a-check-1"
    "plm-warp-xio-a-stats-2"
    "plm-warp-xio-a-check-2"
    "plm-warp-xio-a-stats-3"
    "plm-warp-xio-a-check-3"
    "plm-warp-xio-a-stats-4"
    "plm-warp-xio-a-check-4"
    "plm-warp-xio-a-check-5"
    "plm-warp-xio-a-check-6"

    "plm-convert-prefix-fcsv"

    "plm-fill-a"
    "plm-fill-a-stats"
    "plm-fill-a-check"
    "plm-mask-a"
    "plm-mask-a-stats"
    "plm-mask-a-check"

    "plm-usage" 

    "plm-reg-align-center"
    "plm-reg-align-center-stats"
    "plm-reg-align-center-check"
    "plm-reg-itk-translation"
    "plm-reg-itk-translation-stats"
    "plm-reg-itk-translation-check"
    "plm-reg-itk-rigid"
    "plm-reg-itk-rigid-stats-1"
    "plm-reg-itk-rigid-check-1"
    "plm-reg-itk-rigid-stats-2"
    "plm-reg-itk-rigid-check-2"
    "plm-reg-itk-bspline"
    "plm-reg-itk-bspline-stats-1"
    "plm-reg-itk-bspline-check-1"
    "plm-reg-itk-demons"
    "plm-reg-itk-demons-check-1"
    "plm-reg-itk-demons-stats-2"
    "plm-reg-itk-demons-check-2"
    "plm-bspline-single-c"
    "plm-bspline-single-c-stats" 
    "plm-bspline-single-c-check" 
    "plm-bspline-single-h" 
    "plm-bspline-single-h-stats"
    "plm-bspline-single-h-check"
    "plm-bspline-openmp" 
    "plm-bspline-openmp-stats"
    "plm-bsp-openmp-check"
    "plm-bsp-cuda"
    "plm-bsp-cuda-stats"
    "plm-bsp-cuda-check"
    "plm-reg-bspline-ushort"
    "plm-reg-bspline-ushort-stats"
    "plm-reg-bspline-ushort-check"
    "plm-reg-bspline-double"
    "plm-reg-bspline-double-stats"
    "plm-reg-bspline-double-check"
    "plm-reg-bspline-itk-output"

    "plm-reg-bspline-char-output"
    "plm-reg-bspline-char-output-stats"
    "plm-reg-bspline-char-output-check"

    "plm-bsp-rect"
    "plm-bsp-regularize-none"
    "plm-bsp-regularize-none-stats"
    "plm-bsp-regularize-none-check"
    "plm-bsp-regularize-analytic"
    "plm-bsp-regularize-analytic-stats"
    "plm-bsp-regularize-analytic-check"
    "plm-bsp-regularize-numeric"
    "plm-bsp-regularize-numeric-stats"
    "plm-bsp-regularize-numeric-check"

    "plm-bsp-landmark-a"

#    "plm-bsp-dcos-a"
#    "plm-bsp-dcos-a-stats"
#    "plm-bsp-dcos-a-check"
    "plm-bsp-dcos-b"
    "plm-bsp-dcos-b-stats"
    "plm-bsp-dcos-b-check"

    "plm-reg-compose" 
    "plm-compose-a" 
    "plm-compose-a-warp" 
    "plm-compose-a-stats"
    "plm-compose-a-check"
    "plm-compose-b" 
    "plm-compose-b-warp" 
    "plm-compose-b-stats"
    "plm-compose-b-check"
    "plm-compose-c" 
    "plm-compose-c-warp" 
    "plm-compose-c-stats"
    "plm-compose-c-check"

    "plm-resample-a"
    "plm-resample-a-stats"
    "plm-resample-a-check"
    "plm-resample-b"
    "plm-resample-b-stats"
    "plm-resample-b-check"
    "plm-resample-c"
    "plm-resample-c-stats"
    "plm-resample-c-check"

    "plm-warp-pointset-a" 
    "plm-warp-pointset-b" 
    "plm-warp-pointset-c" 

    "plm-warp-a"
    "plm-warp-a-stats"
    "plm-warp-a-check"
    "plm-warp-b"
    "plm-warp-b-stats-1"
    "plm-warp-b-check-1"
    "plm-warp-b-stats-2"
    "plm-warp-b-check-2"
    "plm-warp-c"
    "plm-warp-c-stats"
    "plm-warp-c-check"
    "plm-warp-d" 
    "plm-warp-d-stats"
    "plm-warp-d-check"
    "plm-warp-g" 
    "plm-warp-g-stats-1"
    "plm-warp-g-check-1"
    "plm-warp-h" 
    "plm-warp-h-stats-1"
    "plm-warp-h-check-1"
    "plm-warp-i" 
    "plm-warp-i-stats-1"
    "plm-warp-i-check-1"

    "plm-xf-convert-a" 
    "plm-xf-convert-b"
    "plm-xf-convert-c"
    "plm-xf-convert-d"
    "plm-xf-convert-d-warp-1"
    "plm-xf-convert-d-warp-1-stats"
    "plm-xf-convert-d-warp-1-check"
    "plm-xf-convert-d-warp-2"
    "plm-xf-convert-d-warp-2-stats"
    "plm-xf-convert-d-warp-2-check"

    "plm-drr-api-a"
    "plm-registration-api-a"

    "bragg-curve"
    "bragg-curve-check"
    "proton-dose"
    )
endif ()
